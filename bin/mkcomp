#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

const COMPONENT_TEMPLATE = `import React from 'react';
import PropTypes from 'prop-types';

export default function {{name}}(props) {
  const {
    children,
    className,
    ...other
  } = props;

  return (
    <div className={className} {...other}>
      {children}
    </div>
  );
}

{{name}}.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
};

{{name}}.defaultProps = {
  className: '',
};
`;

const INDEX_TEMPLATE = `import {{name}} from './{{filename}}';

export default {{name}};
`;

const name = process.argv[2];
const directory = process.argv[3];

if (!name) {
  console.error('Missing component name as first argument.');
  process.exit(1);
}

if (!directory) {
  console.error('Missing path to create component as second argument.');
  process.exit(1);
}

const filename = camelToSnakeCase(name);
const directoryPath = path.resolve(directory, filename);
const indexFileData = compileTemplate(INDEX_TEMPLATE, { name, filename });
const componentFileData = compileTemplate(COMPONENT_TEMPLATE, { name });

fs.mkdirSync(directoryPath);
fs.writeFileSync(path.join(directoryPath, 'index.js'), indexFileData);
fs.writeFileSync(path.join(directoryPath, `${filename}.jsx`), componentFileData);

function camelToSnakeCase(val) {
  return val.replace(/[A-Z]/g, (match, index) => (
    index === 0 ? match.toLowerCase() : `_${match.toLowerCase()}`
  ));
}

function compileTemplate(template, map) {
  return template.replace(/{{\w+}}/g, match => (
    map[match.slice(2, match.length - 2)] || match
  ));
}
